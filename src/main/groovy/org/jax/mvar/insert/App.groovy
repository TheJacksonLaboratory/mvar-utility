/*
 * This Groovy source file was generated by the Gradle 'init' task.
 */
package org.jax.mvar.insert

class App {

    private final static List<String> VARIANT_TYPES = Arrays.asList("SNP", "DEL", "INS", "ALL");

    private static def cmdArgsParser(String[] args) {
        def arguments = [:]
        if (args != null && (args.length == 1 || args.length == 2 || args.length == 3)) {
            arguments["data_path"] = args[0]
            arguments["batch_size"] = 1000
            arguments["type"] = ["ALL"]
        }
        if (args != null && (args.length == 2 || args.length == 3)) {
            for (int i = 1; i <= args.length - 1; i++) {
                String[] attribute = args[i].split("=")
                if (attribute[0] == "batch_size") {
                    arguments["batch_size"] = attribute[1].toInteger()
                } else if (attribute[0] == "type") {
                    String[] types
                    if (attribute[1].contains(',')) {
                        types = attribute[1].split(',')
                        for (String type : types) {
                            if (!VARIANT_TYPES.contains(type))
                                throw new Exception("The type argument can only be one of the following : " + VARIANT_TYPES.toString())
                        }
                        arguments["type"] = types
                    } else {
                        if (!VARIANT_TYPES.contains(attribute[1]))
                            throw new Exception("The type argument can only be one of the following : " + VARIANT_TYPES.toString())
                        arguments["type"] = [attribute[1]] as String[]
                    }
                } else {
                    throw new Exception("The second argument need to be \'batch_size=\' or \'type=\'")
                }
            }
        }
        if (args == null || args.length > 3) {
            throw new Exception("Command line arguments expected are : data path (mandatory), batch_size=Integer (optional, default=1000), use_type=true/false (optional, default=false)")
        }
        return arguments
    }

    static void main(String[] args) {
        VariantInsertion insertService = new VariantInsertion();
        def arguments = cmdArgsParser(args)
        try {
            String path = arguments["data_path"]
            Integer batchSize = arguments["batch_size"]
            String[] type = arguments["type"]
            File f = new File(path)
            assert f != null
            if (f.isDirectory()) {
                File[] files = new File(path).listFiles();
                assert files != null
                for (File file : files) {
                    if (file.isFile() && (file.getName().endsWith(".gz") || (file.getName().endsWith(".vcf"))))
                        insertService.loadVCF(file, batchSize, type)
                }
            } else if (f.isFile() && (f.getName().endsWith(".gz") || (f.getName().endsWith(".vcf")))) {
                insertService.loadVCF(f, batchSize, type);
            } else {
                throw new Exception("Could not find file or directory : " + f.getPath())
            }
        } catch (Exception exc) {
            System.out.println(Arrays.toString(exc.getStackTrace()));
        }

    }
}
